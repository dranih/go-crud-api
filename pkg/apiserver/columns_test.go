package apiserver

import (
	"fmt"
	"net/http"
	"sync"
	"testing"

	"github.com/dranih/go-crud-api/pkg/utils"
)

// Global API tests for records
// To check compatibility with php-crud-api
func TestColumnsApi(t *testing.T) {
	utils.SelectConfig()
	config := ReadConfig()
	config.Init()
	serverStarted := new(sync.WaitGroup)
	serverStarted.Add(1)
	api := NewApi(config)
	go api.Handle(serverStarted)
	//Waiting http server to start
	serverStarted.Wait()
	serverUrlHttps := fmt.Sprintf("https://%s:%d", config.Server.Address, config.Server.HttpsPort)

	//https://ieftimov.com/post/testing-in-go-testing-http-servers/
	//https://stackoverflow.com/questions/42474259/golang-how-to-live-test-an-http-server
	tt := []utils.Test{
		//Sqlite : no geometry and bigint ids
		{
			Name:   "001_get_database_A",
			Method: http.MethodGet,
			Uri:    "/columns",
			Body:   ``,
			//WantJson: `{"tables":[{"name":"barcodes","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]},{"name":"categories","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"icon","type":"blob","nullable":true}]},{"name":"comments","type":"table","columns":[{"name":"id","type":"bigint","pk":true},{"name":"post_id","type":"integer","fk":"posts"},{"name":"message","type":"varchar","length":255},{"name":"category_id","type":"integer","fk":"categories"}]},{"name":"countries","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"shape","type":"geometry"}]},{"name":"events","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"datetime","type":"timestamp","nullable":true},{"name":"visitors","type":"bigint","nullable":true}]},{"name":"kunsthåndværk","type":"table","columns":[{"name":"id","type":"varchar","length":36,"pk":true},{"name":"Umlauts ä_ö_ü-COUNT","type":"integer"},{"name":"user_id","type":"integer","fk":"users"},{"name":"invisible_id","type":"varchar","length":36,"nullable":true,"fk":"invisibles"}]},{"name":"nopk","type":"table","columns":[{"name":"id","type":"varchar","length":36}]},{"name":"post_tags","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"post_id","type":"integer","fk":"posts"},{"name":"tag_id","type":"integer","fk":"tags"}]},{"name":"posts","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"user_id","type":"integer","fk":"users"},{"name":"category_id","type":"integer","fk":"categories"},{"name":"content","type":"varchar","length":255}]},{"name":"products","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"price","type":"decimal","precision":10,"scale":2},{"name":"properties","type":"clob"},{"name":"created_at","type":"timestamp"},{"name":"deleted_at","type":"timestamp","nullable":true}]},{"name":"tag_usage","type":"view","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"count","type":"bigint"}]},{"name":"tags","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"is_important","type":"boolean"}]},{"name":"users","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"username","type":"varchar","length":255},{"name":"password","type":"varchar","length":255},{"name":"api_key","type":"varchar","length":255,"nullable":true},{"name":"location","type":"geometry","nullable":true}]}]}`,
			//Sqlite : no geometry and bigint ids
			WantJson:   `{"tables":[{"columns":[{"name":"bin","type":"blob"},{"length":255,"name":"hex","type":"varchar"},{"name":"id","pk":true,"type":"integer"},{"length":15,"name":"ip_address","nullable":true,"type":"varchar"},{"fk":"products","name":"product_id","type":"integer"}],"name":"barcodes","type":"table"},{"columns":[{"name":"icon","nullable":true,"type":"blob"},{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"name","type":"varchar"}],"name":"categories","type":"table"},{"columns":[{"fk":"categories","name":"category_id","type":"integer"},{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"message","type":"varchar"},{"fk":"posts","name":"post_id","type":"integer"}],"name":"comments","type":"table"},{"columns":[{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"name","type":"varchar"},{"name":"shape","type":"clob"}],"name":"countries","type":"table"},{"columns":[{"name":"datetime","nullable":true,"type":"timestamp"},{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"name","type":"varchar"},{"name":"visitors","nullable":true,"type":"bigint"}],"name":"events","type":"table"},{"columns":[{"name":"Umlauts ä_ö_ü-COUNT","type":"integer"},{"length":36,"name":"id","pk":true,"type":"varchar"},{"fk":"invisibles","length":36,"name":"invisible_id","nullable":true,"type":"varchar"},{"fk":"users","name":"user_id","type":"integer"}],"name":"kunsthåndværk","type":"table"},{"columns":[{"length":36,"name":"id","type":"varchar"}],"name":"nopk","type":"table"},{"columns":[{"name":"id","pk":true,"type":"integer"},{"fk":"posts","name":"post_id","type":"integer"},{"fk":"tags","name":"tag_id","type":"integer"}],"name":"post_tags","type":"table"},{"columns":[{"fk":"categories","name":"category_id","type":"integer"},{"length":255,"name":"content","type":"varchar"},{"name":"id","pk":true,"type":"integer"},{"fk":"users","name":"user_id","type":"integer"}],"name":"posts","type":"table"},{"columns":[{"name":"created_at","type":"timestamp"},{"name":"deleted_at","nullable":true,"type":"timestamp"},{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"name","type":"varchar"},{"name":"price","precision":10,"scale":2,"type":"decimal"},{"name":"properties","type":"clob"}],"name":"products","type":"table"},{"columns":[{"name":"count","type":"clob"},{"name":"id","pk":true,"type":"integer"},{"length":255,"name":"name","type":"varchar"}],"name":"tag_usage","type":"view"},{"columns":[{"name":"id","pk":true,"type":"integer"},{"name":"is_important","type":"boolean"},{"length":255,"name":"name","type":"varchar"}],"name":"tags","type":"table"},{"columns":[{"length":255,"name":"api_key","nullable":true,"type":"varchar"},{"name":"id","pk":true,"type":"integer"},{"name":"location","nullable":true,"type":"clob"},{"length":255,"name":"password","type":"varchar"},{"length":255,"name":"username","type":"varchar"}],"name":"users","type":"table"}]}`,
			StatusCode: http.StatusOK,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"mysql": true, "pgsql": true, "sqlsrv": true},
		},
		{
			Name:       "001_get_database_B",
			Method:     http.MethodGet,
			Uri:        "/columns",
			Body:       ``,
			WantJson:   `{"tables":[{"name":"barcodes","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]},{"name":"categories","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"icon","type":"blob","nullable":true}]},{"name":"comments","type":"table","columns":[{"name":"id","type":"bigint","pk":true},{"name":"post_id","type":"integer","fk":"posts"},{"name":"message","type":"varchar","length":255},{"name":"category_id","type":"integer","fk":"categories"}]},{"name":"countries","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"shape","type":"geometry"}]},{"name":"events","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"datetime","type":"timestamp","nullable":true},{"name":"visitors","type":"bigint","nullable":true}]},{"name":"kunsthåndværk","type":"table","columns":[{"name":"id","type":"varchar","length":36,"pk":true},{"name":"Umlauts ä_ö_ü-COUNT","type":"integer"},{"name":"user_id","type":"integer","fk":"users"},{"name":"invisible_id","type":"varchar","length":36,"nullable":true,"fk":"invisibles"}]},{"name":"nopk","type":"table","columns":[{"name":"id","type":"varchar","length":36}]},{"name":"post_tags","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"post_id","type":"integer","fk":"posts"},{"name":"tag_id","type":"integer","fk":"tags"}]},{"name":"posts","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"user_id","type":"integer","fk":"users"},{"name":"category_id","type":"integer","fk":"categories"},{"name":"content","type":"varchar","length":255}]},{"name":"products","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"price","type":"decimal","precision":10,"scale":2},{"name":"properties","type":"clob"},{"name":"created_at","type":"timestamp"},{"name":"deleted_at","type":"timestamp","nullable":true}]},{"name":"tag_usage","type":"view","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"count","type":"bigint"}]},{"name":"tags","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"name","type":"varchar","length":255},{"name":"is_important","type":"boolean"}]},{"name":"users","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"username","type":"varchar","length":255},{"name":"password","type":"varchar","length":255},{"name":"api_key","type":"varchar","length":255,"nullable":true},{"name":"location","type":"geometry","nullable":true}]}]}`,
			StatusCode: http.StatusOK,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
		},
		{
			Name:       "002_get_barcodes_table",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes",
			Body:       ``,
			WantJson:   `{"name":"barcodes","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "003_get_barcodes_id_column",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/id",
			Body:       ``,
			WantJson:   `{"name":"id","type":"integer","pk":true}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "004_update_barcodes_id_column_A",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/id",
			Body:       `{"name":"id2","type":"bigint"}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		//For sqlite, bigint = integer
		{
			Name:       "004_update_barcodes_id_column_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/id2",
			Body:       ``,
			WantJson:   `{"name":"id2","type":"integer","pk":true}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"mysql": true, "pgsql": true, "sqlsrv": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "004_update_barcodes_id_column_C",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/id2",
			Body:       ``,
			WantJson:   `{"name":"id2","type":"bigint","pk":true}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "004_update_barcodes_id_column_D",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/id2",
			Body:       `{"name":"id","type":"integer"}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "004_update_barcodes_id_column_E",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/id",
			Body:       ``,
			WantJson:   `{"name":"id","type":"integer","pk":true}`,
			StatusCode: http.StatusOK,
		},
		// No alter table for sqlite
		{
			Name:       "005_update_barcodes_product_id_nullable_A",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/product_id",
			Body:       `{"nullable":true}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "005_update_barcodes_product_id_nullable_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/product_id",
			Body:       ``,
			WantJson:   `{"name":"product_id","type":"integer","nullable":true,"fk":"products"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "005_update_barcodes_product_id_nullable_C",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/product_id",
			Body:       `{"nullable":false}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "005_update_barcodes_product_id_nullable_D",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/product_id",
			Body:       ``,
			WantJson:   `{"name":"product_id","type":"integer","fk":"products"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_A",
			Method:     http.MethodGet,
			Uri:        "/columns/events/visitors",
			Body:       ``,
			WantJson:   `{"name":"visitors","type":"bigint","nullable":true}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_B",
			Method:     http.MethodPut,
			Uri:        "/columns/events/visitors",
			Body:       `{"nullable":false}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_C",
			Method:     http.MethodGet,
			Uri:        "/columns/events/visitors",
			Body:       ``,
			WantJson:   `{"name":"visitors","type":"bigint"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_D",
			Method:     http.MethodPut,
			Uri:        "/columns/events/visitors",
			Body:       `{"nullable":true}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_E",
			Method:     http.MethodGet,
			Uri:        "/columns/events/id",
			Body:       ``,
			WantJson:   `{"name":"id","type":"integer","pk":true}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_F",
			Method:     http.MethodPut,
			Uri:        "/columns/events/visitors",
			Body:       `{"pk":false}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_G",
			Method:     http.MethodGet,
			Uri:        "/columns/events/visitors",
			Body:       ``,
			WantJson:   `{"name":"visitors","type":"bigint","nullable":true}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_H",
			Method:     http.MethodPut,
			Uri:        "/columns/events/id",
			Body:       `{"pk":true}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "006_update_events_visitors_pk_I",
			Method:     http.MethodGet,
			Uri:        "/columns/events/id",
			Body:       ``,
			WantJson:   `{"name":"id","type":"integer","pk":true}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "007_update_barcodes_product_id_fk_A",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/product_id",
			Body:       `{"fk":""}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "007_update_barcodes_product_id_fk_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/product_id",
			Body:       ``,
			WantJson:   `{"name":"product_id","type":"integer"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "007_update_barcodes_product_id_fk_C",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/product_id",
			Body:       `{"fk":"products"}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "007_update_barcodes_product_id_fk_D",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/product_id",
			Body:       ``,
			WantJson:   `{"name":"product_id","type":"integer","fk":"products"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "008_update_barcodes_table_A",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes",
			Body:       `{"name":"barcodes2"}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "008_update_barcodes_table_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes2",
			Body:       ``,
			WantJson:   `{"name":"barcodes2","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "008_update_barcodes_table_C",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes2",
			Body:       `{"name":"barcodes"}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "008_update_barcodes_table_D",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes",
			Body:       ``,
			WantJson:   `{"name":"barcodes","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "009_update_barcodes_hex_type_A",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/hex",
			Body:       `{"type":"clob"}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "009_update_barcodes_hex_type_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/hex",
			Body:       ``,
			WantJson:   `{"name":"hex","type":"clob"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "009_update_barcodes_hex_type_C",
			Method:     http.MethodPut,
			Uri:        "/columns/barcodes/hex",
			Body:       `{"type":"varchar","length":255}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "009_update_barcodes_hex_type_D",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/hex",
			Body:       ``,
			WantJson:   `{"name":"hex","type":"varchar","length":255}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "010_create_barcodes_table_A",
			Method:     http.MethodPost,
			Uri:        "/columns",
			Body:       `{"name":"barcodes2","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "010_create_barcodes_table_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes2",
			Body:       ``,
			WantJson:   `{"name":"barcodes2","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"product_id","type":"integer","fk":"products"},{"name":"hex","type":"varchar","length":255},{"name":"bin","type":"blob"},{"name":"ip_address","type":"varchar","length":15,"nullable":true}]}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "010_create_barcodes_table_C",
			Method:     http.MethodDelete,
			Uri:        "/columns/barcodes2",
			Body:       ``,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "011_create_barcodes_column_A",
			Method:     http.MethodPost,
			Uri:        "/columns/barcodes",
			Body:       `{"name":"alternative_product_id","type":"integer","nullable":true,"fk":"products"}`,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "011_create_barcodes_column_B",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes/alternative_product_id",
			Body:       ``,
			WantJson:   `{"name":"alternative_product_id","type":"integer","nullable":true,"fk":"products"}`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "011_create_barcodes_column_C",
			Method:     http.MethodDelete,
			Uri:        "/columns/barcodes/alternative_product_id",
			Body:       ``,
			Want:       `true`,
			Driver:     config.Api.Driver,
			SkipFor:    map[string]bool{"sqlite": true},
			StatusCode: http.StatusOK,
		},
		{
			Name:       "012_get_invisibles_table",
			Method:     http.MethodGet,
			Uri:        "/columns/invisibles",
			Body:       ``,
			Want:       `{"code":1001,"message":"Table 'invisibles' not found"}`,
			StatusCode: http.StatusNotFound,
		},
		{
			Name:       "013_get_invisible_column",
			Method:     http.MethodGet,
			Uri:        "/columns/kunsthåndværk/invisible",
			Body:       ``,
			Want:       `{"code":1005,"message":"Column 'invisible' not found"}`,
			StatusCode: http.StatusNotFound,
		},
		{
			Name:       "014_create_types_table_A",
			Method:     http.MethodPost,
			Uri:        "/columns",
			Body:       `{"name":"types","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"integer","type":"integer"},{"name":"bigint","type":"bigint"},{"name":"varchar","type":"varchar","length":10},{"name":"decimal","type":"decimal","precision":10,"scale":4},{"name":"float","type":"float"},{"name":"double","type":"double"},{"name":"boolean","type":"boolean"},{"name":"date","type":"date"},{"name":"time","type":"time"},{"name":"timestamp","type":"timestamp"},{"name":"clob","type":"clob"},{"name":"blob","type":"blob"},{"name":"geometry","type":"geometry"}]}`,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "014_create_types_table_B",
			Method:     http.MethodGet,
			Uri:        "/columns/types",
			Body:       ``,
			WantJson:   `{"name":"types","type":"table","columns":[{"name":"id","type":"integer","pk":true},{"name":"integer","type":"integer"},{"name":"bigint","type":"bigint"},{"name":"varchar","type":"varchar","length":10},{"name":"decimal","type":"decimal","precision":10,"scale":4},{"name":"float","type":"float"},{"name":"double","type":"double"},{"name":"boolean","type":"boolean"},{"name":"date","type":"date"},{"name":"time","type":"time"},{"name":"timestamp","type":"timestamp"},{"name":"clob","type":"clob"},{"name":"blob","type":"blob"},{"name":"geometry","type":"geometry"}]}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "014_create_types_table_C",
			Method:     http.MethodPost,
			Uri:        "/records/types",
			Body:       `{"integer":3,"bigint":4,"varchar":"bcd","decimal":"2.34","float":2,"double":34.56,"boolean":false,"date":"2020-02-02","time":"23:55:59","timestamp":"2002-03-04 05:06:07","clob":"b","blob":"Yg==","geometry":"POINT(2 3)"}`,
			Want:       `1`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "014_create_types_table_D",
			Method:     http.MethodPut,
			Uri:        "/records/types/1",
			Body:       `{"integer":2,"bigint":3,"varchar":"abc","decimal":"1.23","float":1,"double":23.45,"boolean":true,"date":"1970-01-01","time":"00:00:01","timestamp":"2001-02-03 04:05:06","clob":"a","blob":"YQ==","geometry":"POINT(1 2)"}`,
			Want:       `1`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "014_create_types_table_E",
			Method:     http.MethodGet,
			Uri:        "/records/types/1",
			Body:       ``,
			WantJson:   `{"id":1,"integer":2,"bigint":3,"varchar":"abc","decimal":"1.2300","float":1,"double":23.45,"boolean":true,"date":"1970-01-01","time":"00:00:01","timestamp":"2001-02-03 04:05:06","clob":"a","blob":"YQ==","geometry":"POINT(1 2)"}`,
			StatusCode: http.StatusOK,
		},
		{
			Name:       "014_create_types_table_F",
			Method:     http.MethodDelete,
			Uri:        "/columns/types",
			Body:       ``,
			Want:       `true`,
			StatusCode: http.StatusOK,
		},
		//Missing column tests 15 and 16
		{
			Name:       "017_get_barcodes_table_as_xml",
			Method:     http.MethodGet,
			Uri:        "/columns/barcodes?format=xml",
			Body:       ``,
			Want:       `<root><columns><name>bin</name><type>blob</type></columns><columns><length>255</length><name>hex</name><type>varchar</type></columns><columns><name>id</name><pk>true</pk><type>integer</type></columns><columns><length>15</length><name>ip_address</name><nullable>true</nullable><type>varchar</type></columns><columns><fk>products</fk><name>product_id</name><type>integer</type></columns><name>barcodes</name><type>table</type></root>`,
			StatusCode: http.StatusOK,
		},
	}
	utils.RunTests(t, serverUrlHttps, tt)
}
